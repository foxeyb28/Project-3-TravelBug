{"ast":null,"code":"var _jsxFileName = \"/Users/adriennemadarang/code/Project-3-TravelBug/client/src/components/SignUpForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignUpForm = () => {\n  _s();\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({\n    username: '',\n    email: '',\n    password: ''\n  });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  const [addUser, {\n    error\n  }] = useMutation(ADD_USER);\n  const handleInputChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setUserFormData({\n      ...userFormData,\n      [name]: value\n    });\n  };\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    try {\n      const {\n        data\n      } = await addUser({\n        variables: {\n          ...userFormData\n        }\n      });\n      if (!data) {\n        throw new Error('something went wrong!');\n      }\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n    setUserFormData({\n      username: '',\n      email: '',\n      password: ''\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Testing.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(SignUpForm, \"9DmkTTlK2kYOSC/44cPWZqJK4DQ=\", false, function () {\n  return [useMutation];\n});\n_c = SignUpForm;\nexport default SignUpForm;\n\n//  {/* This is needed for the validation functionality above */}\n//       {/* <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n//         {/* show alert if server response is bad */}\n//         <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n//           Something went wrong with your signup!\n//         </Alert>\n\n//         <Form.Group className='mb-3'>\n//           <Form.Label htmlFor='username'>Username</Form.Label>\n//           <Form.Control\n//             type='text'\n//             placeholder='Your username'\n//             name='username'\n//             onChange={handleInputChange}\n//             value={userFormData.username}\n//             required\n//           />\n//           <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n//         </Form.Group>\n\n//         <Form.Group className='mb-3'>\n//           <Form.Label htmlFor='email'>Email</Form.Label>\n//           <Form.Control\n//             type='email'\n//             placeholder='Your email address'\n//             name='email'\n//             onChange={handleInputChange}\n//             value={userFormData.email}\n//             required\n//           />\n//           <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n//         </Form.Group>\n\n//         <Form.Group className='mb-3'>\n//           <Form.Label htmlFor='password'>Password</Form.Label>\n//           <Form.Control\n//             type='password'\n//             placeholder='Your password'\n//             name='password'\n//             onChange={handleInputChange}\n//             value={userFormData.password}\n//             required\n//           />\n//           <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n//         </Form.Group>\n//         <Button\n//           disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n//           type='submit'\n//           variant='success'>\n//           Submit\n//         </Button>\n//       </Form> */}\nvar _c;\n$RefreshReg$(_c, \"SignUpForm\");","map":{"version":3,"names":["React","useState","useMutation","ADD_USER","Auth","jsxDEV","_jsxDEV","SignUpForm","_s","userFormData","setUserFormData","username","email","password","validated","showAlert","setShowAlert","addUser","error","handleInputChange","event","name","value","target","handleFormSubmit","preventDefault","form","currentTarget","checkValidity","stopPropagation","data","variables","Error","login","token","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/adriennemadarang/code/Project-3-TravelBug/client/src/components/SignUpForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst SignUpForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, {error}] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({ variables: { ...userFormData }});\n\n      if (!data) {\n        throw new Error('something went wrong!');\n      }\n      Auth.login(data.addUser.token); \n\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <p>Testing.</p>\n  );\n};\n\nexport default SignUpForm;\n\n\n\n\n\n//  {/* This is needed for the validation functionality above */}\n//       {/* <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n//         {/* show alert if server response is bad */}\n//         <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n//           Something went wrong with your signup!\n//         </Alert>\n\n//         <Form.Group className='mb-3'>\n//           <Form.Label htmlFor='username'>Username</Form.Label>\n//           <Form.Control\n//             type='text'\n//             placeholder='Your username'\n//             name='username'\n//             onChange={handleInputChange}\n//             value={userFormData.username}\n//             required\n//           />\n//           <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n//         </Form.Group>\n\n//         <Form.Group className='mb-3'>\n//           <Form.Label htmlFor='email'>Email</Form.Label>\n//           <Form.Control\n//             type='email'\n//             placeholder='Your email address'\n//             name='email'\n//             onChange={handleInputChange}\n//             value={userFormData.email}\n//             required\n//           />\n//           <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n//         </Form.Group>\n\n//         <Form.Group className='mb-3'>\n//           <Form.Label htmlFor='password'>Password</Form.Label>\n//           <Form.Control\n//             type='password'\n//             placeholder='Your password'\n//             name='password'\n//             onChange={handleInputChange}\n//             value={userFormData.password}\n//             required\n//           />\n//           <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n//         </Form.Group>\n//         <Button\n//           disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n//           type='submit'\n//           variant='success'>\n//           Submit\n//         </Button>\n//       </Form> */}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,OAAOC,IAAI,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC;IAAEU,QAAQ,EAAE,EAAE;IAAEC,KAAK,EAAE,EAAE;IAAEC,QAAQ,EAAE;EAAG,CAAC,CAAC;EAC3F;EACA,MAAM,CAACC,SAAS,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACnC;EACA,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAM,CAACgB,OAAO,EAAE;IAACC;EAAK,CAAC,CAAC,GAAGhB,WAAW,CAACC,QAAQ,CAAC;EAEhD,MAAMgB,iBAAiB,GAAIC,KAAK,IAAK;IACnC,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,KAAK,CAACG,MAAM;IACpCb,eAAe,CAAC;MAAE,GAAGD,YAAY;MAAE,CAACY,IAAI,GAAGC;IAAM,CAAC,CAAC;EACrD,CAAC;EAED,MAAME,gBAAgB,GAAG,MAAOJ,KAAK,IAAK;IACxCA,KAAK,CAACK,cAAc,CAAC,CAAC;;IAEtB;IACA,MAAMC,IAAI,GAAGN,KAAK,CAACO,aAAa;IAChC,IAAID,IAAI,CAACE,aAAa,CAAC,CAAC,KAAK,KAAK,EAAE;MAClCR,KAAK,CAACK,cAAc,CAAC,CAAC;MACtBL,KAAK,CAACS,eAAe,CAAC,CAAC;IACzB;IAEA,IAAI;MACF,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMb,OAAO,CAAC;QAAEc,SAAS,EAAE;UAAE,GAAGtB;QAAa;MAAC,CAAC,CAAC;MAEjE,IAAI,CAACqB,IAAI,EAAE;QACT,MAAM,IAAIE,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACA5B,IAAI,CAAC6B,KAAK,CAACH,IAAI,CAACb,OAAO,CAACiB,KAAK,CAAC;IAEhC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAAClB,KAAK,CAACiB,GAAG,CAAC;MAClBnB,YAAY,CAAC,IAAI,CAAC;IACpB;IAEAN,eAAe,CAAC;MACdC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ,CAAC;EAED,oBACEP,OAAA;IAAA+B,QAAA,EAAG;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;AAEnB,CAAC;AAACjC,EAAA,CAhDID,UAAU;EAAA,QAQaL,WAAW;AAAA;AAAAwC,EAAA,GARlCnC,UAAU;AAkDhB,eAAeA,UAAU;;AAMzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}