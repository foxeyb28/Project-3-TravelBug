{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\epine\\\\bootcamp\\\\TravelBug\\\\Project-3-TravelBug\\\\client\\\\src\\\\components\\\\Container.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport NavTabs from './Navtabs';\nimport Home from './pages/Home';\nimport PlacesToGo from './pages/PlacesToGo';\nimport getLocationId from '../utils/api/LocationSearch';\nimport getRestaurants from '../utils/api/RestaurantSearch';\n\n// import Restaurants  from './pages/Restaurants ';\nimport Attractions from './pages/Attractions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Container() {\n  _s();\n  const [currentPage, setCurrentPage] = useState('Home');\n  const [locationId, setLocationId] = useState('');\n  const [restaurant, setRestaurant] = useState('');\n  const [cityName, setCityName] = useState('');\n  useEffect(() => {\n    getLocationId().then(data => {\n      setLocationId(data);\n      getRestaurants(data).then(restaurantData => {\n        setRestaurant(restaurantData);\n      });\n    });\n  }, []);\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setCityName(value);\n  };\n  const handleSearch = event => {\n    getLocationId(cityName).then(data => {\n      setLocationId(data);\n      getRestaurants(data).then(restaurantData => {\n        setRestaurant(restaurantData);\n      });\n    });\n  };\n  // This method is checking to see what the value of `currentPage` is. Depending on the value of currentPage, we return the corresponding component to render.\n  const renderPage = () => {\n    if (currentPage === 'Home') {\n      return /*#__PURE__*/_jsxDEV(Home, {\n        handleChange: handleChange,\n        handleSearch: handleSearch,\n        cityName: cit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 14\n      }, this);\n    }\n    if (currentPage === 'Attractions') {\n      return /*#__PURE__*/_jsxDEV(Attractions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 14\n      }, this);\n    }\n    if (currentPage === 'PlacesToGo') {\n      return /*#__PURE__*/_jsxDEV(PlacesToGo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 14\n      }, this);\n    }\n    // if (currentPage === 'Restaurants ') {\n    //     return <Restaurants  />;\n    // }\n  };\n\n  const handlePageChange = page => setCurrentPage(page);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [console.log(restaurant), /*#__PURE__*/_jsxDEV(NavTabs, {\n      currentPage: currentPage,\n      handlePageChange: handlePageChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), renderPage()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(Container, \"7+zEoIpXeUQDAiYy4GhhALFLiqo=\");\n_c = Container;\nvar _c;\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"names":["React","useState","useEffect","NavTabs","Home","PlacesToGo","getLocationId","getRestaurants","Attractions","jsxDEV","_jsxDEV","Container","_s","currentPage","setCurrentPage","locationId","setLocationId","restaurant","setRestaurant","cityName","setCityName","then","data","restaurantData","handleChange","event","name","value","target","handleSearch","renderPage","cit","fileName","_jsxFileName","lineNumber","columnNumber","handlePageChange","page","children","console","log","_c","$RefreshReg$"],"sources":["C:/Users/epine/bootcamp/TravelBug/Project-3-TravelBug/client/src/components/Container.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport NavTabs from './Navtabs';\nimport Home from './pages/Home';\nimport PlacesToGo from './pages/PlacesToGo';\nimport getLocationId from '../utils/api/LocationSearch';\nimport getRestaurants from '../utils/api/RestaurantSearch';\n\n// import Restaurants  from './pages/Restaurants ';\nimport Attractions from './pages/Attractions';\n\nexport default function Container() {\n  const [currentPage, setCurrentPage] = useState('Home');\n  const [locationId, setLocationId] = useState('')\n  const [restaurant, setRestaurant] = useState('')\n  const [cityName, setCityName] = useState('')\n  \n  useEffect(()=>{\n    getLocationId().then(data=>{\n      setLocationId(data)\n      getRestaurants(data).then(restaurantData=>{\n        setRestaurant(restaurantData)\n      })\n    })\n  },[])\n  const handleChange = (event) => {\n    const {name, value} = event.target\n    setCityName(value)\n  }\n  const handleSearch = (event) => {\n    getLocationId(cityName).then(data=>{\n      setLocationId(data)\n      getRestaurants(data).then(restaurantData=>{\n        setRestaurant(restaurantData)\n      })\n    })\n  }\n  // This method is checking to see what the value of `currentPage` is. Depending on the value of currentPage, we return the corresponding component to render.\n  const renderPage = () => {\n    if (currentPage === 'Home') {\n      return <Home handleChange={handleChange} handleSearch={handleSearch}cityName={cit}/>;\n    }\n    if (currentPage === 'Attractions') {\n      return <Attractions />;\n    }\n    if (currentPage === 'PlacesToGo') {\n      return <PlacesToGo />;\n    }\n    // if (currentPage === 'Restaurants ') {\n    //     return <Restaurants  />;\n    // }\n  };\n\n  const handlePageChange = (page) => setCurrentPage(page);\n\n  return (\n    <div>\n      {console.log(restaurant)}\n      {/* We are passing the currentPage from state and the function to update it */}\n      <NavTabs currentPage={currentPage} handlePageChange={handlePageChange} />\n      {renderPage()}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}